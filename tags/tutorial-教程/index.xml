<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial 教程 on 岁月留痕</title>
    <link>https://www.hewei.in/tags/tutorial-%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in Tutorial 教程 on 岁月留痕</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Oct 2020 11:31:39 +0800</lastBuildDate><atom:link href="https://www.hewei.in/tags/tutorial-%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo 博客配置教程</title>
      <link>https://www.hewei.in/posts/2020-10-hugo-blog-tutorial/</link>
      <pubDate>Sat, 17 Oct 2020 11:31:39 +0800</pubDate>
      
      <guid>https://www.hewei.in/posts/2020-10-hugo-blog-tutorial/</guid>
      <description>&lt;h2 id=&#34;创建博客所需-repo&#34;&gt;创建博客所需 repo&lt;/h2&gt;
&lt;p&gt;假设你在 GitHub 上的用户名是 &lt;code&gt;abcd&lt;/code&gt;，那么在 GitHub 上创建下面两个 repo：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个叫 &lt;code&gt;blog&lt;/code&gt;，用于存放 Hugo 博客的源文件&lt;/li&gt;
&lt;li&gt;另一个叫 &lt;code&gt;abcd.github.io&lt;/code&gt;，用于存放 Hugo 编译生成的网页文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记得在创建第二个 repo 的时候，至少选上 README、.gitignore、LICENSE 三个文件中的一个，这样创建出来的 repo 就不是空的。&lt;/p&gt;
&lt;p&gt;如果不这样做，将第二个 repo 添加为第一个 repo 的子模块的操作就会失败，处理起来会很麻烦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js 包管理</title>
      <link>https://www.hewei.in/posts/2020-10-nodejs-package-management/</link>
      <pubDate>Thu, 08 Oct 2020 04:56:33 +0800</pubDate>
      
      <guid>https://www.hewei.in/posts/2020-10-nodejs-package-management/</guid>
      <description>&lt;h2 id=&#34;包管理器安装&#34;&gt;包管理器安装&lt;/h2&gt;
&lt;p&gt;安装 Node.js 时，会连同 npm 这个默认的包管理器一起安装上。&lt;/p&gt;
&lt;p&gt;但平时使用的话，还是建议用 Yarn，安装这部分没什么好说的，下载安装包然后按照默认设置安装即可。&lt;/p&gt;
&lt;p&gt;注：本文凡是提到 Yarn 的部分，均指 Yarn 1.X 版本。&lt;/p&gt;
&lt;h2 id=&#34;第一时间配置下载源&#34;&gt;第一时间配置下载源&lt;/h2&gt;
&lt;p&gt;用如下命令给 npm 和 Yarn 配置淘宝源，加速 npm 包下载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# npm 配置淘宝源&lt;/span&gt;
$ npm config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https://registry.npm.taobao.org

&lt;span class=&#34;c1&#34;&gt;# npm 查看源设置是否成功&lt;/span&gt;
$ npm config get registry

&lt;span class=&#34;c1&#34;&gt;# Yarn 配置淘宝源&lt;/span&gt;
$ yarn config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; registry https://registry.npm.taobao.org

&lt;span class=&#34;c1&#34;&gt;# Yarn 查看源设置是否成功&lt;/span&gt;
$ yarn config get registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>用 PM2 管理 Node.js 后端项目</title>
      <link>https://www.hewei.in/posts/2020-10-pm2-tutorial/</link>
      <pubDate>Thu, 08 Oct 2020 04:31:20 +0800</pubDate>
      
      <guid>https://www.hewei.in/posts/2020-10-pm2-tutorial/</guid>
      <description>&lt;p&gt;PM2 不仅可以实现 Node.js 项目的持久化，还能实现代码的自动发布，在本机更改代码并推送到 GitHub 上之后，通过一行命令，就可以让服务端自动下载最新的代码并编译执行，以下是具体流程。&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;p&gt;每次升级 PM2 或者 Node.js 版本后，都要按文档 &lt;a href=&#34;https://pm2.keymetrics.io/docs/usage/update-pm2/&#34;&gt;Updating PM2&lt;/a&gt; 给出的标准流程来操作，保证不影响 PM2 所管理的项目。&lt;/p&gt;
&lt;p&gt;另外，如果 Windows 下的 Node.js 程序是用 &lt;a href=&#34;https://stackoverflow.com/a/42770772/2667665&#34;&gt;Windows: Auto start PM2 and node apps&lt;/a&gt; 这里说的方法做的持久化，那么在升级 PM2 之后，Node.js 程序的持久化有可能失效。这样的话，就需要按照这里说的方法，将作为服务启动的 PM2 删除并重新新建才行。&lt;/p&gt;
&lt;h3 id=&#34;升级-pm2&#34;&gt;升级 PM2&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 保存 PM2 项目列表及配置&lt;/span&gt;
pm2 save

&lt;span class=&#34;c1&#34;&gt;# 用 npm 或 yarn 升级全局安装的 PM2&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 更新到新版的 PM2&lt;/span&gt;
pm2 update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;升级-nodejs&#34;&gt;升级 Node.js&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pm2 unstartup
$ pm2 startup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Docker 中部署 GitLab</title>
      <link>https://www.hewei.in/posts/2020-07-config-gitlab-in-docker/</link>
      <pubDate>Mon, 20 Jul 2020 10:10:59 +0800</pubDate>
      
      <guid>https://www.hewei.in/posts/2020-07-config-gitlab-in-docker/</guid>
      <description>&lt;h2 id=&#34;下载-gitlab-镜像&#34;&gt;下载 GitLab 镜像&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull gitlab/gitlab-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;镜像链接：&lt;a href=&#34;https://hub.docker.com/r/gitlab/gitlab-ce/&#34;&gt;https://hub.docker.com/r/gitlab/gitlab-ce/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装-docker-compose&#34;&gt;安装 Docker Compose&lt;/h2&gt;
&lt;p&gt;官方教程：&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Install Docker Compose&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建-docker-compose-配置文件&#34;&gt;创建 docker-compose 配置文件&lt;/h2&gt;
&lt;p&gt;在主机的 &lt;code&gt;/etc/gitlab&lt;/code&gt; 目录下创建 GitLab 容器的配置文件 &lt;code&gt;docker-compose.yml&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;web:
  image: &lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab/gitlab-ce:latest&amp;#39;&lt;/span&gt;
  container_name: gitlab
  restart: always
  hostname: &lt;span class=&#34;s1&#34;&gt;&amp;#39;code.upp.com&amp;#39;&lt;/span&gt;
  environment:
    GITLAB_OMNIBUS_CONFIG: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
      external_url &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://code.upp.com&amp;#39;&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gitlab_email_from&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;username@mail.domain.com&amp;#39;&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_enable&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_address&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;smtpdm.aliyun.com&amp;#34;&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_port&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_user_name&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;username@mail.domain.com&amp;#34;&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_password&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;smtp_password&amp;#34;&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_domain&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mail.domain.com&amp;#34;&lt;/span&gt;
      gitlab_rails&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp_authentication&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;
  ports:
    - &lt;span class=&#34;s1&#34;&gt;&amp;#39;80:80&amp;#39;&lt;/span&gt;
    - &lt;span class=&#34;s1&#34;&gt;&amp;#39;443:443&amp;#39;&lt;/span&gt;
  volumes:
    - &lt;span class=&#34;s1&#34;&gt;&amp;#39;$GITLAB_HOME/config:/etc/gitlab&amp;#39;&lt;/span&gt;
    - &lt;span class=&#34;s1&#34;&gt;&amp;#39;$GITLAB_HOME/logs:/var/log/gitlab&amp;#39;&lt;/span&gt;
    - &lt;span class=&#34;s1&#34;&gt;&amp;#39;$GITLAB_HOME/data:/var/opt/gitlab&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时修改电脑上的 DNS，设置 &lt;code&gt;code.upp.com&lt;/code&gt; 为运行 GitLab 服务器所对应的 IP。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
